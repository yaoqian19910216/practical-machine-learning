Introduction
Using devices such as Jawbone Up, Nike FuelBand, and Fitbit it is now possible to collect a large amount of data about
personal activity relatively inexpensively. These type of devices are part of the quantified self movement â€“ a group of
enthusiasts who take measurements about themselves regularly to improve their health, to find patterns in their behavior,
or because they are tech geeks. One thing that people regularly do is quantify how much of a particular activity they do,
but they rarely quantify how well they do it. In this project, your goal will be to use data from accelerometers on the belt,
forearm, arm, and dumbell of 6 participants. They were asked to perform barbell lifts correctly and incorrectly in 5 different
ways. More information is available from the website here
Data
The data for this project come from this source: http://groupware.les.inf.puc-rio.br/har.
The training data are available here and the test data here
We download the two datasets
downloadcsv <- function(url, nastrings) {
temp <- tempfile()
download.file(url, temp, method = "curl")
data <- read.csv(temp, na.strings = nastrings)
unlink(temp)
return(data)
}
trainurl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
train <- downloadcsv(trainurl, c("", "NA", "#DIV/0!"))
testurl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
test <- downloadcsv(testurl, c("", "NA", "#DIV/0!"))
The training data has 19622 observations and 160 features, and the distribution of the five measured stances A,B,C,D,E
is:
dim(train)
## [1] 19622 160
table(train$classe)
##
## A B C D E
## 5580 3797 3422 3216 3607
Preprocessing
Partitioning the training set
We separate our training data into a training set and a validation set so that we can validate our model.
library(caret)
## Loading required package: lattice
## Loading required package: ggplot2
set.seed(123456)
trainset <- createDataPartition(train$classe, p = 0.8, list = FALSE)
Training <- train[trainset, ]
Validation <- train[-trainset, ]
Feature selection
First we clean up near zero variance features, columns with missing values and descriptive fields.
# exclude near zero variance features
nzvcol <- nearZeroVar(Training)
Training <- Training[, -nzvcol]
# exclude columns with m40% ore more missing values exclude descriptive
# columns like name etc
cntlength <- sapply(Training, function(x) {
sum(!(is.na(x) | x == ""))
})
nullcol <- names(cntlength[cntlength < 0.6 * length(Training$classe)])
descriptcol <- c("X", "user_name", "raw_timestamp_part_1", "raw_timestamp_part_2",
"cvtd_timestamp", "new_window", "num_window")
excludecols <- c(descriptcol, nullcol)
Training <- Training[, !names(Training) %in% excludecols]
Model Train
We will use random forest as our model as implemented in the randomForest package by Breiman's random forest
algorithm (based on Breiman and Cutler's original Fortran code) for classification and regression.
library(randomForest)
## randomForest 4.6-7
## Type rfNews() to see new features/changes/bug fixes.
rfModel <- randomForest(classe ~ ., data = Training, importance = TRUE, ntrees =
10)
Model Validation
Let us now test our model performance on the training set itself and the cross validation set.
Training set accuracy
ptraining <- predict(rfModel, Training)
print(confusionMatrix(ptraining, Training$classe))
